pipeline {
    agent { 
        label 'windows-agent' 
    }
    environment {
        IMAGE_NAME = "ghofrane13/demo-helloworld"
        DOCKERHUB_CREDENTIALS = "dockerhub-creds"
        IMAGE_TAG = "latest"

    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']],
                          userRemoteConfigs: [[url: 'https://github.com/ghofran190/CICD_DockerApp.git']]])
            }
        }

        stage('Start Minikube') {
            steps {
                script {
                    // D√©marrer Minikube si ce n'est pas d√©j√† fait
                    bat "minikube status || minikube start --driver=docker"
                    bat "kubectl cluster-info"
                }
            }
        }

        stage('Build with Maven') {
            steps {
                bat 'mvn clean package -DskipTests'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def IMAGE_TAG = "${env.BUILD_NUMBER}"
                    bat "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                    bat "docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest"
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS,
                                                 usernameVariable: 'DOCKER_USER',
                                                 passwordVariable: 'DOCKER_PASS')]) {
                    bat 'echo %DOCKER_PASS% | docker login -u %DOCKER_USER% --password-stdin'
                    bat "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                    bat "docker push ${IMAGE_NAME}:latest"
                }
            }
        }

        stage('Clean Helm Chart') {
            steps {
                script {
                    // Supprimer tous les fichiers de template non n√©cessaires
                    bat """
                    @echo off
                    echo === Nettoyage du chart Helm ===
                    
                    if exist "helm-chart\\templates\\tests" (
                        echo Suppression des tests Helm...
                        rmdir /s /q "helm-chart\\templates\\tests"
                    )
                    
                    if exist "helm-chart\\templates\\serviceaccount.yaml" (
                        echo Suppression du serviceaccount...
                        del "helm-chart\\templates\\serviceaccount.yaml"
                    )
                    
                    if exist "helm-chart\\templates\\ingress.yaml" (
                        echo Suppression de ingress.yaml...
                        del "helm-chart\\templates\\ingress.yaml"
                    )
                    
                    if exist "helm-chart\\templates\\hpa.yaml" (
                        echo Suppression de hpa.yaml...
                        del "helm-chart\\templates\\hpa.yaml"
                    )
                    
                    if exist "helm-chart\\templates\\NOTES.txt" (
                        echo Suppression de NOTES.txt...
                        del "helm-chart\\templates\\NOTES.txt"
                    )
                    
                    echo ‚úÖ Chart Helm nettoy√©
                    """
                }
            }
        }

        stage('Deploy with Helm') {
            steps {
                script {
                    def IMAGE_TAG = "${env.BUILD_NUMBER}"
                    
                    // Cr√©er le namespace
                    bat "kubectl create namespace tp-devops --dry-run=client -o yaml | kubectl apply -f -"
                    
                    // D√©ployer avec Helm
                    bat "helm upgrade --install demo-helloworld helm-chart -n tp-devops --set image.tag=${IMAGE_TAG}"
                    
                    // Attendre
                    bat "powershell -Command \"Start-Sleep -Seconds 50\""
                }
            }
        }

        stage('Verification') {
            steps {
                bat """
                echo === V√âRIFICATION ===
                helm list -n tp-devops
                kubectl get pods -n tp-devops
                kubectl get services -n tp-devops
                kubectl get deployments -n tp-devops
                """
            }
        }
    }

    post {
        success {
            echo "üéâ SUCC√àS : D√©ploiement avec Helm r√©ussi !"
        }
        failure {
            echo "‚ùå √âchec du d√©ploiement avec Helm"
        }
    }
}
