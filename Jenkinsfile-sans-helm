pipeline {
    agent { 
        label 'windows-agent' 
    }
    environment {
        IMAGE_NAME = "ghofrane13/demo-helloworld"
        DOCKERHUB_CREDENTIALS = "dockerhub-creds"
        KUBE_NAMESPACE = "tp-devops"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']],
                          userRemoteConfigs: [[url: 'https://github.com/ghofran190/CICD_DockerApp.git']]])
                
                // VÉRIFICATION DES FICHIERS
                bat """
                echo === Vérification des fichiers YAML ===
                dir *.yaml
                echo === Contenu de deployment.yaml ===
                type deployment.yaml
                """
            }
        }

        stage('Build with Maven') {
            steps {
                bat 'mvn clean package -DskipTests'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    IMAGE_TAG = "${env.BUILD_NUMBER}"
                }
                bat "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                bat "docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest"
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS,
                                                 usernameVariable: 'DOCKER_USER',
                                                 passwordVariable: 'DOCKER_PASS')]) {
                    bat 'echo %DOCKER_PASS% | docker login -u %DOCKER_USER% --password-stdin'
                    bat "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                    bat "docker push ${IMAGE_NAME}:latest"
                }
            }
        }

        stage('Deploy to Kubernetes (Sans Helm)') {
            steps {
                script {
                    // 1. Créer le namespace
                    bat "kubectl create namespace ${KUBE_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -"
                    
                    // 2. OPTION SIMPLIFIÉE : Utiliser directement deployment.yaml (sans remplacement)
                    bat "echo === Déploiement avec deployment.yaml (sans remplacement) ==="
                    bat "kubectl apply -f deployment.yaml -n ${KUBE_NAMESPACE}"
                    bat "kubectl apply -f service.yaml -n ${KUBE_NAMESPACE}"
                    
                    // 3. Vérifier le déploiement
                    bat "kubectl rollout status deployment/demo-helloworld -n ${KUBE_NAMESPACE} --timeout=300s"
                }
            }
        }

        stage('Verification') {
            steps {
                bat """
                echo === PODS ===
                kubectl get pods -n ${KUBE_NAMESPACE} -o wide
                echo === SERVICES ===
                kubectl get services -n ${KUBE_NAMESPACE}
                echo === DÉPLOIEMENTS ===
                kubectl get deployments -n ${KUBE_NAMESPACE}
                """
                
                // Test simplifié de l'application
                bat """
                echo === Vérification de l'application ===
                kubectl get pods -n ${KUBE_NAMESPACE} -l app=demo-helloworld
                timeout /t 10
                """
            }
        }
    }

    post {
        always {
            echo "=== STATUT FINAL ==="
            bat "kubectl get all -n ${KUBE_NAMESPACE} || echo 'Aucune ressource'"
        }
        success {
            echo "✅ Déploiement Kubernetes sans Helm réussi!"
        }
        failure {
            echo "❌ Échec du déploiement sans Helm"
            // Debug information
            bat "kubectl describe pods -n ${KUBE_NAMESPACE} -l app=demo-helloworld || echo 'Pas de pods à décrire'"
            bat "kubectl logs -n ${KUBE_NAMESPACE} -l app=demo-helloworld --tail=20 || echo 'Pas de logs disponibles'"
        }
    }
}
