pipeline {
    agent { 
        label 'windows-agent' 
    }
    environment {
        IMAGE_NAME = "ghofrane13/demo-helloworld"
        DOCKERHUB_CREDENTIALS = "dockerhub-creds"
        KUBE_NAMESPACE = "tp-devops"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']],
                          userRemoteConfigs: [[url: 'https://github.com/ghofran190/CICD_DockerApp.git']]])
            }
        }

        stage('Build with Maven') {
            steps {
                bat 'mvn clean package -DskipTests'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    IMAGE_TAG = "${env.BUILD_NUMBER}"
                }
                bat "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                bat "docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest"
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS,
                                                 usernameVariable: 'DOCKER_USER',
                                                 passwordVariable: 'DOCKER_PASS')]) {
                    bat 'echo %DOCKER_PASS% | docker login -u %DOCKER_USER% --password-stdin'
                    bat "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                    bat "docker push ${IMAGE_NAME}:latest"
                }
            }
        }

        stage('Deploy to Kubernetes (Sans Helm)') {
            steps {
                script {
                    // Créer le namespace
                    bat "kubectl create namespace ${KUBE_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -"
                    
                    // CORRECTION : Méthode plus simple pour remplacer le tag
                    bat """
                    @echo off
                    set IMAGE_TAG=${IMAGE_TAG}
                    echo Replacing BUILD_TAG with %IMAGE_TAG%
                    copy deployment-with-tag.yaml deployment-current.yaml
                    powershell -Command "(Get-Content deployment-current.yaml) -replace 'BUILD_TAG', '%IMAGE_TAG%' | Set-Content deployment-current.yaml"
                    """
                    
                    // Appliquer les configurations
                    bat "kubectl apply -f deployment-current.yaml -n ${KUBE_NAMESPACE}"
                    bat "kubectl apply -f service.yaml -n ${KUBE_NAMESPACE}"
                    
                    // Attendre que le déploiement soit ready
                    bat "kubectl rollout status deployment/demo-helloworld -n ${KUBE_NAMESPACE} --timeout=300s"
                }
            }
        }

        stage('Verification') {
            steps {
                bat "kubectl get pods -n ${KUBE_NAMESPACE} -o wide"
                bat "kubectl get services -n ${KUBE_NAMESPACE}"
                bat "kubectl get deployments -n ${KUBE_NAMESPACE}"
                
                // Test de l'application
                bat """
                echo Verification du déploiement...
                kubectl get pods -n ${KUBE_NAMESPACE} -o wide
                timeout /t 10
                """
            }
        }
    }

    post {
        success {
            echo " Déploiement Kubernetes sans Helm réussi!"
            bat "kubectl get all -n ${KUBE_NAMESPACE}"
        }
        failure {
            echo " Échec du déploiement sans Helm"
            bat "kubectl describe pods -n ${KUBE_NAMESPACE} -l app=demo-helloworld"
            bat "kubectl logs -n ${KUBE_NAMESPACE} -l app=demo-helloworld --tail=50"
        }
    }
}
