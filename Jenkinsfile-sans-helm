pipeline {
    agent { label 'windows-agent' }
    environment {
        IMAGE_NAME = "ghofrane13/demo-helloworld"
        DOCKERHUB_CREDENTIALS = "dockerhub-creds"
        KUBE_NAMESPACE = "tp-devops"

    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']],
                          userRemoteConfigs: [[url: 'https://github.com/ghofran190/CICD_DockerApp.git']]])
            }
        }

        stage('Build with Maven') {
            steps {
                bat 'mvn clean package -DskipTests'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    IMAGE_TAG = "${env.BUILD_NUMBER}"
                }
                bat "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                bat "docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest"
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS,
                                                 usernameVariable: 'DOCKER_USER',
                                                 passwordVariable: 'DOCKER_PASS')]) {
                    bat 'echo %DOCKER_PASS% | docker login -u %DOCKER_USER% --password-stdin'
                    bat "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                    bat "docker push ${IMAGE_NAME}:latest"
                }
            }
        }
    

    
        stage('Deploy to Kubernetes (Sans Helm)') {
            steps {
                script {
                    // Créer le namespace
                    bat "kubectl create namespace ${KUBE_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -"
                    
                    // Mettre à jour l'image avec le tag de build
                    bat """
                      (Get-Content deployment-with-tag.yaml) -replace \"BUILD_TAG\", \"${IMAGE_TAG}\" | Set-Content deployment-current.yaml
                      """
                    
                    // Déployer
                    bat "kubectl apply -f deployment-current.yaml -n ${KUBE_NAMESPACE}"
                    bat "kubectl apply -f service.yaml -n ${KUBE_NAMESPACE}"
                    
                    // Attendre que le déploiement soit ready
                    bat "kubectl rollout status deployment/demo-helloworld -n ${KUBE_NAMESPACE} --timeout=300s"
                }
            }
        }

        stage('Verification') {
            steps {
                bat "kubectl get pods -n ${KUBE_NAMESPACE} -o wide"
                bat "kubectl get services -n ${KUBE_NAMESPACE}"
                bat "kubectl get deployments -n ${KUBE_NAMESPACE}"
                
                // Test de l'application
                bat """
                $service = kubectl get service demo-helloworld-service -n ${KUBE_NAMESPACE} -o json | ConvertFrom-Json
                if ($service.status.loadBalancer.ingress) {
                    Write-Host "Application déployée avec succès!"
                } else {
                    Write-Host " Service en cours de configuration..."
                }
                """
            }
        }
    }



    post {
        success {
            echo "Pipeline terminé avec succès. Image : ${IMAGE_NAME}:${IMAGE_TAG}"
        }
        failure {
            echo "Échec du pipeline."
        }
    }
}
